plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.dagger.hilt.android'
    id 'com.google.devtools.ksp' version '1.7.20-1.0.7'
    id 'kotlin-kapt'
    id 'org.jetbrains.dokka'
}

android {
    // Application root namespace where files begin
    namespace 'com.infinity.devtools'
    compileSdk 33

    defaultConfig { // App default configurations
        applicationId "com.infinity.devtools"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables { // Enable vector support library drawables
            useSupportLibrary true
        }
    }

    buildTypes { // Application build types configurations
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions { // Compiler jvm target
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions { // Kotlin jvm target
        jvmTarget = '11'
    }
    testOptions { // Enables unit tests to use Android resources, assets, and manifests.
        unitTests.includeAndroidResources = true
    }
    buildFeatures { // Enable Jetpack compose
        compose true
    }
    composeOptions { // Kotlin Compiler Extension version
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions { // Packaging Options
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation "androidx.compose.ui:ui:1.3.3"
    implementation "androidx.compose.ui:ui-tooling-preview:1.3.3"
    implementation 'androidx.compose.material:material:1.3.1'
    implementation "androidx.navigation:navigation-compose:2.5.3"
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"
    implementation("androidx.compose.animation:animation-graphics:1.3.3")
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:4.0.0"
    testImplementation "org.mockito:mockito-inline:4.0.0"
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.7.20"
    androidTestImplementation("androidx.test:core-ktx:1.5.0")
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.3.3"
    debugImplementation "androidx.compose.ui:ui-tooling:1.3.3"
    debugImplementation "androidx.compose.ui:ui-test-manifest:1.3.3"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    implementation "com.google.accompanist:accompanist-navigation-animation:0.28.0"
    implementation "com.google.dagger:hilt-android:2.44"
    kapt "com.google.dagger:hilt-compiler:2.44"
    implementation 'com.google.devtools.ksp:symbol-processing-api:1.7.20-1.0.7'
    implementation "androidx.room:room-runtime:2.5.0"

    annotationProcessor "androidx.room:room-compiler:2.5.0"
    // To use Coroutine features
    implementation "androidx.room:room-ktx:2.5.0"
    // To use Kotlin annotation processing tool (kapt)
    // kapt "androidx.room:room-compiler:2.5.0"
    // To use Kotlin Symbol Processing (KSP)
    ksp "androidx.room:room-compiler:2.5.0"

    // Custom Libs - Failiure renamed so we are using libs/.aar instead
    // implementation 'com.github.SimformSolutionsPvtLtd:SSJetPackComposeProgressButton:1.0.7'
    implementation files('libs/ssjetpackcomposeprogressbutton-release.aar')
    implementation files('libs/mysql-connector-j-8.0.32.jar')

    // Lottie vector animations
    implementation "com.airbnb.android:lottie-compose:5.2.0"
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}

// Tasks
//tasks.whenTaskAdded { task ->
//    if (task.name == 'assembleDebug') {
//        task.dependsOn 'copyResDirectoryToClasses'
//    }
//}
//
//task copyResDirectoryToClasses(type: Copy) {
//    from "${projectDir}/src/main/res"
//    into "${buildDir}/intermediates/classes/test/debug/res"
//}
// tasks.assembleDebug.dependsOn('copyResDirectoryToClasses')